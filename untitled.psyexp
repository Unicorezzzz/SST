<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2024.2.4">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="Thank you for your patience." valType="str" updates="None" name="End Message"/>
    <Param val="{'participant':'f&quot;{randint(0, 999999):06.0f}&quot;', 'session':'001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="(1024, 768)" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="float" valType="str" updates="None" name="clockFormat"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="warning" valType="code" updates="None" name="consoleLoggingLevel"/>
    <Param val="default" valType="str" updates="None" name="ecSampleRate"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="untitled" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="" valType="code" updates="None" name="frameRate"/>
    <Param val="Attempting to measure frame rate of screen, please wait..." valType="str" updates="None" name="frameRateMsg"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="info" valType="code" updates="None" name="logging level"/>
    <Param val="True" valType="bool" updates="None" name="measureFrameRate"/>
    <Param val="MIDDLE_BUTTON" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="0" valType="code" updates="None" name="runMode"/>
    <Param val="False" valType="bool" updates="None" name="rush"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <RoutineSettingsComponent name="trial" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="trial" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="flecha" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="flecha" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="angle" valType="num" updates="set every repeat" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="arrow" valType="str" updates="None" name="shape"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="respuesta_ensayo_go" plugin="None">
        <Param val="'left','right'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$correct_key" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="respuesta_ensayo_go" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ITI_routine">
      <RoutineSettingsComponent name="ITI_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="ITI_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code_ITI" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;function generate_iti(prev_itis) {&amp;#10;    var diff1, diff2, max_attempts;&amp;#10;    max_attempts = 100;&amp;#10;    for (var _, _pj_c = 0, _pj_a = util.range(max_attempts), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        _ = _pj_a[_pj_c];&amp;#10;        iti = Math.random.randint(1000, 2500);&amp;#10;        if ((prev_itis.length &lt; 2)) {&amp;#10;            return iti;&amp;#10;        }&amp;#10;        diff1 = Math.abs((iti - prev_itis.slice((- 1))[0]));&amp;#10;        diff2 = Math.abs((iti - prev_itis.slice((- 2))[0]));&amp;#10;        if ((! ((diff1 &lt; 100) &amp;&amp; (diff2 &lt; 100)))) {&amp;#10;            return iti;&amp;#10;        }&amp;#10;    }&amp;#10;    return Math.random.choice([1000, 1500, 2000, 2500]);&amp;#10;}&amp;#10;if ((! _pj.in_es6(&quot;prev_itis&quot;, globals()))) {&amp;#10;    prev_itis = [];&amp;#10;}&amp;#10;iti = generate_iti(prev_itis);&amp;#10;prev_itis.push(iti);&amp;#10;if ((prev_itis.length &gt; 2)) {&amp;#10;    prev_itis = prev_itis.slice((- 2));&amp;#10;}&amp;#10;iti_secs = (iti / 1000.0);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Begin Routine del code_iti&amp;#10;import random&amp;#10;&amp;#10;def generate_iti(prev_itis):&amp;#10;    max_attempts = 100&amp;#10;    for _ in range(max_attempts):&amp;#10;        iti = random.randint(1000, 2500)&amp;#10;        if len(prev_itis) &lt; 2:&amp;#10;            return iti&amp;#10;        diff1 = abs(iti - prev_itis[-1])&amp;#10;        diff2 = abs(iti - prev_itis[-2])&amp;#10;        if not (diff1 &lt; 100 and diff2 &lt; 100):&amp;#10;            return iti&amp;#10;    return random.choice([1000, 1500, 2000, 2500])&amp;#10;&amp;#10;if 'prev_itis' not in globals():&amp;#10;    prev_itis = []&amp;#10;&amp;#10;iti = generate_iti(prev_itis)&amp;#10;prev_itis.append(iti)&amp;#10;if len(prev_itis) &gt; 2:&amp;#10;    prev_itis = prev_itis[-2:]&amp;#10;&amp;#10;iti_secs = iti / 1000.0&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_ITI" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="ITI" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="ITI" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="$iti_secs" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="cruz">
      <RoutineSettingsComponent name="cruz" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="cruz" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="cruz_fijacion" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="cruz_fijacion" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="(0.15, 0.15)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="control_volumen" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((trial_type !== &quot;stop&quot;)) {&amp;#10;    SSD = 0;&amp;#10;    volume = 0;&amp;#10;} else {&amp;#10;    SSD = SSD_dynamic;&amp;#10;    volume = 1;&amp;#10;    stop_signal.setVolume(1);&amp;#10;    stop_signal.status = NOT_STARTED;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if trial_type != 'stop':&amp;#10;    SSD = 0&amp;#10;    volume = 0&amp;#10;else:&amp;#10;     SSD = SSD_dynamic&amp;#10;     volume = 1&amp;#10;     stop_signal.setVolume(1)&amp;#10;     stop_signal.status = NOT_STARTED  # reactiva el sonido" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="control_volumen" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="bloque_A">
      <RoutineSettingsComponent name="bloque_A" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="bloque_A" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="flecha_A" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="flecha_A" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="angle" valType="num" updates="set every repeat" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="arrow" valType="str" updates="None" name="shape"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <KeyboardComponent name="respuesta_A" plugin="None">
        <Param val="'left','right'" valType="list" updates="set every repeat" name="allowedKeys"/>
        <Param val="$correct_key" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="respuesta_A" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <SoundComponent name="stop_signal" plugin="None">
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="hamming"/>
        <Param val="stop_signal" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="900" valType="str" updates="set every repeat" name="sound"/>
        <Param val="-1" valType="code" updates="None" name="speakerIndex"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="SSD" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="stopWithRoutine"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
        <Param val="volume" valType="num" updates="set every repeat" name="volume"/>
      </SoundComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="ensayoClock = new util.Clock();&amp;#10;trial_type_actual = trial_type;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="ensayoClock = core.Clock()&amp;#10;trial_type_actual = trial_type&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# Obtenemos tiempo actual del ensayo&amp;#10;t = ensayoClock.getTime()&amp;#10;&amp;#10;# --- GO ---&amp;#10;if trial_type == 'go':&amp;#10;    if respuesta_A.keys and len(respuesta_A.keys) &gt; 0:&amp;#10;        continueRoutine = False&amp;#10;    elif t &gt;= 1.5:&amp;#10;        continueRoutine = False  # omisión&amp;#10;&amp;#10;# --- STOP ---&amp;#10;elif trial_type == 'stop':&amp;#10;    if respuesta_A.keys and len(respuesta_A.keys) &gt; 0:&amp;#10;        flecha_A.setAutoDraw(False)  # desaparece la flecha&amp;#10;    if t &gt;= 1.5:&amp;#10;        continueRoutine = False  # se termine sí o sí a los 1.5 s&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="t = ensayoClock.getTime();&amp;#10;if ((trial_type === &quot;go&quot;)) {&amp;#10;    if ((respuesta_A.keys &amp;&amp; (respuesta_A.keys.length &gt; 0))) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if ((t &gt;= 1.5)) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((trial_type === &quot;stop&quot;)) {&amp;#10;        if ((respuesta_A.keys &amp;&amp; (respuesta_A.keys.length &gt; 0))) {&amp;#10;            flecha_A.setAutoDraw(false);&amp;#10;        }&amp;#10;        if ((t &gt;= 1.5)) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if ((trial_type_actual === &quot;stop&quot;)) {&amp;#10;    if (respuesta_A.keys) {&amp;#10;        SSD_dynamic = Math.max(0.05, (SSD_dynamic - 0.05));&amp;#10;    } else {&amp;#10;        SSD_dynamic = Math.min(0.9, (SSD_dynamic + 0.05));&amp;#10;    }&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;SSD&quot;, SSD);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="if trial_type_actual == 'stop':&amp;#10;    if respuesta_A.keys:&amp;#10;        SSD_dynamic = max(0.05, SSD_dynamic - 0.05)&amp;#10;    else:&amp;#10;        SSD_dynamic = min(0.9, SSD_dynamic + 0.05)&amp;#10;&amp;#10;thisExp.addData('SSD', SSD)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instrucciones">
      <RoutineSettingsComponent name="instrucciones" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="code" updates="None" name="forceNonSlip"/>
        <Param val="instrucciones" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="False" valType="code" updates="constant" name="draggable"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="espacio para comenzar" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="code" updates="None" name="validator"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="" valType="str" updates="None" name="deviceLabel"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="definicion_ssd" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="SSD_dynamic = 0.25  &amp;#10;# valor que se irá ajustando según el staircase&amp;#10;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="SSD_dynamic = 0.25;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="definicion_ssd" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instrucciones"/>
    <LoopInitiator loopType="TrialHandler" name="A">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'left'), ('correct_key', None), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'right'), ('correct_key', 'right'), ('angle', 90)]), OrderedDict([('trial_type', 'stop'), ('direction', 'right'), ('correct_key', None), ('angle', 90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)]), OrderedDict([('trial_type', 'go'), ('direction', 'left'), ('correct_key', 'left'), ('angle', -90)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions/block1_test_sequence.csv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="A" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="ITI_routine"/>
    <Routine name="cruz"/>
    <Routine name="bloque_A"/>
    <LoopTerminator name="A"/>
  </Flow>
</PsychoPy2experiment>
